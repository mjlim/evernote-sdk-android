/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * A description of the thing for which the service will find related
 * entities, via findRelated(), together with a description of what
 * type of entities and how many you are seeking in the
 * RelatednessResult.
 * 
 * <dl>
 * <dt>maxNotes</dt>
 * <dd>Return notes that are related to the query, but no more than
 *     this many.  Any value greater than EDAM_RELATED_MAX_NOTES
 *     will be silently capped.  If you do not set this field, then
 *     no notes will be returned.</dd>
 * 
 * <dt>maxNotebooks</dt>
 * <dd>Return notebooks that are related to the query, but no more than
 *     this many.  Any value greater than EDAM_RELATED_MAX_NOTEBOOKS
 *     will be silently capped.  If you do not set this field, then
 *     no notebooks will be returned.</dd>
 * 
 * <dt>maxTags</dt>
 * <dd>Return tags that are related to the query, but no more than
 *     this many.  Any value greater than EDAM_RELATED_MAX_TAGS
 *     will be silently capped.  If you do not set this field, then
 *     no tags will be returned.</dd>
 * </dl>
 */
public class RelatedResultSpec implements TBase<RelatedResultSpec, RelatedResultSpec._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RelatedResultSpec");

  private static final TField MAX_NOTES_FIELD_DESC = new TField("maxNotes", TType.I32, (short)1);
  private static final TField MAX_NOTEBOOKS_FIELD_DESC = new TField("maxNotebooks", TType.I32, (short)2);
  private static final TField MAX_TAGS_FIELD_DESC = new TField("maxTags", TType.I32, (short)3);

  private int maxNotes;
  private int maxNotebooks;
  private int maxTags;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    MAX_NOTES((short)1, "maxNotes"),
    MAX_NOTEBOOKS((short)2, "maxNotebooks"),
    MAX_TAGS((short)3, "maxTags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_NOTES
          return MAX_NOTES;
        case 2: // MAX_NOTEBOOKS
          return MAX_NOTEBOOKS;
        case 3: // MAX_TAGS
          return MAX_TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXNOTES_ISSET_ID = 0;
  private static final int __MAXNOTEBOOKS_ISSET_ID = 1;
  private static final int __MAXTAGS_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_NOTES, new FieldMetaData("maxNotes", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.MAX_NOTEBOOKS, new FieldMetaData("maxNotebooks", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.MAX_TAGS, new FieldMetaData("maxTags", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(RelatedResultSpec.class, metaDataMap);
  }

  public RelatedResultSpec() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RelatedResultSpec(RelatedResultSpec other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.maxNotes = other.maxNotes;
    this.maxNotebooks = other.maxNotebooks;
    this.maxTags = other.maxTags;
  }

  public RelatedResultSpec deepCopy() {
    return new RelatedResultSpec(this);
  }

  public void clear() {
    setMaxNotesIsSet(false);
    this.maxNotes = 0;
    setMaxNotebooksIsSet(false);
    this.maxNotebooks = 0;
    setMaxTagsIsSet(false);
    this.maxTags = 0;
  }

  public int getMaxNotes() {
    return this.maxNotes;
  }

  public void setMaxNotes(int maxNotes) {
    this.maxNotes = maxNotes;
    setMaxNotesIsSet(true);
  }

  public void unsetMaxNotes() {
    __isset_vector[__MAXNOTES_ISSET_ID] = false;
  }

  /** Returns true if field maxNotes is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxNotes() {
    return __isset_vector[__MAXNOTES_ISSET_ID];
  }

  public void setMaxNotesIsSet(boolean value) {
    __isset_vector[__MAXNOTES_ISSET_ID] = value;
  }

  public int getMaxNotebooks() {
    return this.maxNotebooks;
  }

  public void setMaxNotebooks(int maxNotebooks) {
    this.maxNotebooks = maxNotebooks;
    setMaxNotebooksIsSet(true);
  }

  public void unsetMaxNotebooks() {
    __isset_vector[__MAXNOTEBOOKS_ISSET_ID] = false;
  }

  /** Returns true if field maxNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxNotebooks() {
    return __isset_vector[__MAXNOTEBOOKS_ISSET_ID];
  }

  public void setMaxNotebooksIsSet(boolean value) {
    __isset_vector[__MAXNOTEBOOKS_ISSET_ID] = value;
  }

  public int getMaxTags() {
    return this.maxTags;
  }

  public void setMaxTags(int maxTags) {
    this.maxTags = maxTags;
    setMaxTagsIsSet(true);
  }

  public void unsetMaxTags() {
    __isset_vector[__MAXTAGS_ISSET_ID] = false;
  }

  /** Returns true if field maxTags is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxTags() {
    return __isset_vector[__MAXTAGS_ISSET_ID];
  }

  public void setMaxTagsIsSet(boolean value) {
    __isset_vector[__MAXTAGS_ISSET_ID] = value;
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_NOTES:
      if (value == null) {
        unsetMaxNotes();
      } else {
        setMaxNotes((Integer)value);
      }
      break;

    case MAX_NOTEBOOKS:
      if (value == null) {
        unsetMaxNotebooks();
      } else {
        setMaxNotebooks((Integer)value);
      }
      break;

    case MAX_TAGS:
      if (value == null) {
        unsetMaxTags();
      } else {
        setMaxTags((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_NOTES:
      return new Integer(getMaxNotes());

    case MAX_NOTEBOOKS:
      return new Integer(getMaxNotebooks());

    case MAX_TAGS:
      return new Integer(getMaxTags());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_NOTES:
      return isSetMaxNotes();
    case MAX_NOTEBOOKS:
      return isSetMaxNotebooks();
    case MAX_TAGS:
      return isSetMaxTags();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RelatedResultSpec)
      return this.equals((RelatedResultSpec)that);
    return false;
  }

  public boolean equals(RelatedResultSpec that) {
    if (that == null)
      return false;

    boolean this_present_maxNotes = true && this.isSetMaxNotes();
    boolean that_present_maxNotes = true && that.isSetMaxNotes();
    if (this_present_maxNotes || that_present_maxNotes) {
      if (!(this_present_maxNotes && that_present_maxNotes))
        return false;
      if (this.maxNotes != that.maxNotes)
        return false;
    }

    boolean this_present_maxNotebooks = true && this.isSetMaxNotebooks();
    boolean that_present_maxNotebooks = true && that.isSetMaxNotebooks();
    if (this_present_maxNotebooks || that_present_maxNotebooks) {
      if (!(this_present_maxNotebooks && that_present_maxNotebooks))
        return false;
      if (this.maxNotebooks != that.maxNotebooks)
        return false;
    }

    boolean this_present_maxTags = true && this.isSetMaxTags();
    boolean that_present_maxTags = true && that.isSetMaxTags();
    if (this_present_maxTags || that_present_maxTags) {
      if (!(this_present_maxTags && that_present_maxTags))
        return false;
      if (this.maxTags != that.maxTags)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(RelatedResultSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RelatedResultSpec typedOther = (RelatedResultSpec)other;

    lastComparison = Boolean.valueOf(isSetMaxNotes()).compareTo(typedOther.isSetMaxNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNotes()) {      lastComparison = TBaseHelper.compareTo(this.maxNotes, typedOther.maxNotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNotebooks()).compareTo(typedOther.isSetMaxNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.maxNotebooks, typedOther.maxNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxTags()).compareTo(typedOther.isSetMaxTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxTags()) {      lastComparison = TBaseHelper.compareTo(this.maxTags, typedOther.maxTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MAX_NOTES
          if (field.type == TType.I32) {
            this.maxNotes = iprot.readI32();
            setMaxNotesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MAX_NOTEBOOKS
          if (field.type == TType.I32) {
            this.maxNotebooks = iprot.readI32();
            setMaxNotebooksIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MAX_TAGS
          if (field.type == TType.I32) {
            this.maxTags = iprot.readI32();
            setMaxTagsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetMaxNotes()) {
      oprot.writeFieldBegin(MAX_NOTES_FIELD_DESC);
      oprot.writeI32(this.maxNotes);
      oprot.writeFieldEnd();
    }
    if (isSetMaxNotebooks()) {
      oprot.writeFieldBegin(MAX_NOTEBOOKS_FIELD_DESC);
      oprot.writeI32(this.maxNotebooks);
      oprot.writeFieldEnd();
    }
    if (isSetMaxTags()) {
      oprot.writeFieldBegin(MAX_TAGS_FIELD_DESC);
      oprot.writeI32(this.maxTags);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("RelatedResultSpec(");
    boolean first = true;

    if (isSetMaxNotes()) {
      sb.append("maxNotes:");
      sb.append(this.maxNotes);
      first = false;
    }
    if (isSetMaxNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("maxNotebooks:");
      sb.append(this.maxNotebooks);
      first = false;
    }
    if (isSetMaxTags()) {
      if (!first) sb.append(", ");
      sb.append("maxTags:");
      sb.append(this.maxTags);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}


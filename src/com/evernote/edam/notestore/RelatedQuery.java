/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * A description of the thing for which we are searching for related
 * entities.  You must choose exactly one field.
 * 
 * <dl>
 * <dt>noteGuid</dt>
 * <dd>The GUID of an existing note in your account for which related
 *     entities will be found.</dd>
 * 
 * <dt>plainText</dt>
 * <dd>A string of plain text for which to find related entities.
 *     You should provide a text block with a number of characters between
 *     EDAM_RELATED_PLAINTEXT_LEN_MIN and EDAM_RELATED_PLAINTEXT_LEN_MAX.
 *     </dd>
 * </dl>
 */
public class RelatedQuery implements TBase<RelatedQuery, RelatedQuery._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RelatedQuery");

  private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)1);
  private static final TField PLAIN_TEXT_FIELD_DESC = new TField("plainText", TType.STRING, (short)2);

  private String noteGuid;
  private String plainText;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NOTE_GUID((short)1, "noteGuid"),
    PLAIN_TEXT((short)2, "plainText");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTE_GUID
          return NOTE_GUID;
        case 2: // PLAIN_TEXT
          return PLAIN_TEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTE_GUID, new FieldMetaData("noteGuid", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PLAIN_TEXT, new FieldMetaData("plainText", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(RelatedQuery.class, metaDataMap);
  }

  public RelatedQuery() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RelatedQuery(RelatedQuery other) {
    if (other.isSetNoteGuid()) {
      this.noteGuid = other.noteGuid;
    }
    if (other.isSetPlainText()) {
      this.plainText = other.plainText;
    }
  }

  public RelatedQuery deepCopy() {
    return new RelatedQuery(this);
  }

  public void clear() {
    this.noteGuid = null;
    this.plainText = null;
  }

  public String getNoteGuid() {
    return this.noteGuid;
  }

  public void setNoteGuid(String noteGuid) {
    this.noteGuid = noteGuid;
  }

  public void unsetNoteGuid() {
    this.noteGuid = null;
  }

  /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
  public boolean isSetNoteGuid() {
    return this.noteGuid != null;
  }

  public void setNoteGuidIsSet(boolean value) {
    if (!value) {
      this.noteGuid = null;
    }
  }

  public String getPlainText() {
    return this.plainText;
  }

  public void setPlainText(String plainText) {
    this.plainText = plainText;
  }

  public void unsetPlainText() {
    this.plainText = null;
  }

  /** Returns true if field plainText is set (has been asigned a value) and false otherwise */
  public boolean isSetPlainText() {
    return this.plainText != null;
  }

  public void setPlainTextIsSet(boolean value) {
    if (!value) {
      this.plainText = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTE_GUID:
      if (value == null) {
        unsetNoteGuid();
      } else {
        setNoteGuid((String)value);
      }
      break;

    case PLAIN_TEXT:
      if (value == null) {
        unsetPlainText();
      } else {
        setPlainText((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTE_GUID:
      return getNoteGuid();

    case PLAIN_TEXT:
      return getPlainText();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTE_GUID:
      return isSetNoteGuid();
    case PLAIN_TEXT:
      return isSetPlainText();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RelatedQuery)
      return this.equals((RelatedQuery)that);
    return false;
  }

  public boolean equals(RelatedQuery that) {
    if (that == null)
      return false;

    boolean this_present_noteGuid = true && this.isSetNoteGuid();
    boolean that_present_noteGuid = true && that.isSetNoteGuid();
    if (this_present_noteGuid || that_present_noteGuid) {
      if (!(this_present_noteGuid && that_present_noteGuid))
        return false;
      if (!this.noteGuid.equals(that.noteGuid))
        return false;
    }

    boolean this_present_plainText = true && this.isSetPlainText();
    boolean that_present_plainText = true && that.isSetPlainText();
    if (this_present_plainText || that_present_plainText) {
      if (!(this_present_plainText && that_present_plainText))
        return false;
      if (!this.plainText.equals(that.plainText))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(RelatedQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RelatedQuery typedOther = (RelatedQuery)other;

    lastComparison = Boolean.valueOf(isSetNoteGuid()).compareTo(typedOther.isSetNoteGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteGuid()) {      lastComparison = TBaseHelper.compareTo(this.noteGuid, typedOther.noteGuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlainText()).compareTo(typedOther.isSetPlainText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlainText()) {      lastComparison = TBaseHelper.compareTo(this.plainText, typedOther.plainText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NOTE_GUID
          if (field.type == TType.STRING) {
            this.noteGuid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PLAIN_TEXT
          if (field.type == TType.STRING) {
            this.plainText = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.noteGuid != null) {
      if (isSetNoteGuid()) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
    }
    if (this.plainText != null) {
      if (isSetPlainText()) {
        oprot.writeFieldBegin(PLAIN_TEXT_FIELD_DESC);
        oprot.writeString(this.plainText);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("RelatedQuery(");
    boolean first = true;

    if (isSetNoteGuid()) {
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
    }
    if (isSetPlainText()) {
      if (!first) sb.append(", ");
      sb.append("plainText:");
      if (this.plainText == null) {
        sb.append("null");
      } else {
        sb.append(this.plainText);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}


/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * The result of calling findRelated().  The contents of the notes,
 * notebooks, and tags fields will be in decreasing order of expected
 * relevance.  It is possible that fewer results than requested will be
 * returned even if there are enough distinct entities in the account
 * in cases where the relevance is estimated to be low.
 * 
 * <dl>
 * <dt>notes</dt>
 * <dd>If notes have been requested to be included, this will be the
 *     list of notes.</dd>
 * 
 * <dt>notebooks</dt>
 * <dd>If notebooks have been requested to be included, this will be the
 *     list of notebooks.</dd>
 * 
 * <dt>tags</dt>
 * <dd>If tags have been requested to be included, this will be the list
 *     of tags.</dd>
 * </dl>
 */
public class RelatedResult implements TBase<RelatedResult, RelatedResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RelatedResult");

  private static final TField NOTES_FIELD_DESC = new TField("notes", TType.LIST, (short)1);
  private static final TField NOTEBOOKS_FIELD_DESC = new TField("notebooks", TType.LIST, (short)2);
  private static final TField TAGS_FIELD_DESC = new TField("tags", TType.LIST, (short)3);

  private List<com.evernote.edam.type.Note> notes;
  private List<com.evernote.edam.type.Notebook> notebooks;
  private List<com.evernote.edam.type.Tag> tags;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NOTES((short)1, "notes"),
    NOTEBOOKS((short)2, "notebooks"),
    TAGS((short)3, "tags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTES
          return NOTES;
        case 2: // NOTEBOOKS
          return NOTEBOOKS;
        case 3: // TAGS
          return TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTES, new FieldMetaData("notes", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class))));
    tmpMap.put(_Fields.NOTEBOOKS, new FieldMetaData("notebooks", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class))));
    tmpMap.put(_Fields.TAGS, new FieldMetaData("tags", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(RelatedResult.class, metaDataMap);
  }

  public RelatedResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RelatedResult(RelatedResult other) {
    if (other.isSetNotes()) {
      List<com.evernote.edam.type.Note> __this__notes = new ArrayList<com.evernote.edam.type.Note>();
      for (com.evernote.edam.type.Note other_element : other.notes) {
        __this__notes.add(new com.evernote.edam.type.Note(other_element));
      }
      this.notes = __this__notes;
    }
    if (other.isSetNotebooks()) {
      List<com.evernote.edam.type.Notebook> __this__notebooks = new ArrayList<com.evernote.edam.type.Notebook>();
      for (com.evernote.edam.type.Notebook other_element : other.notebooks) {
        __this__notebooks.add(new com.evernote.edam.type.Notebook(other_element));
      }
      this.notebooks = __this__notebooks;
    }
    if (other.isSetTags()) {
      List<com.evernote.edam.type.Tag> __this__tags = new ArrayList<com.evernote.edam.type.Tag>();
      for (com.evernote.edam.type.Tag other_element : other.tags) {
        __this__tags.add(new com.evernote.edam.type.Tag(other_element));
      }
      this.tags = __this__tags;
    }
  }

  public RelatedResult deepCopy() {
    return new RelatedResult(this);
  }

  public void clear() {
    this.notes = null;
    this.notebooks = null;
    this.tags = null;
  }

  public int getNotesSize() {
    return (this.notes == null) ? 0 : this.notes.size();
  }

  public java.util.Iterator<com.evernote.edam.type.Note> getNotesIterator() {
    return (this.notes == null) ? null : this.notes.iterator();
  }

  public void addToNotes(com.evernote.edam.type.Note elem) {
    if (this.notes == null) {
      this.notes = new ArrayList<com.evernote.edam.type.Note>();
    }
    this.notes.add(elem);
  }

  public List<com.evernote.edam.type.Note> getNotes() {
    return this.notes;
  }

  public void setNotes(List<com.evernote.edam.type.Note> notes) {
    this.notes = notes;
  }

  public void unsetNotes() {
    this.notes = null;
  }

  /** Returns true if field notes is set (has been asigned a value) and false otherwise */
  public boolean isSetNotes() {
    return this.notes != null;
  }

  public void setNotesIsSet(boolean value) {
    if (!value) {
      this.notes = null;
    }
  }

  public int getNotebooksSize() {
    return (this.notebooks == null) ? 0 : this.notebooks.size();
  }

  public java.util.Iterator<com.evernote.edam.type.Notebook> getNotebooksIterator() {
    return (this.notebooks == null) ? null : this.notebooks.iterator();
  }

  public void addToNotebooks(com.evernote.edam.type.Notebook elem) {
    if (this.notebooks == null) {
      this.notebooks = new ArrayList<com.evernote.edam.type.Notebook>();
    }
    this.notebooks.add(elem);
  }

  public List<com.evernote.edam.type.Notebook> getNotebooks() {
    return this.notebooks;
  }

  public void setNotebooks(List<com.evernote.edam.type.Notebook> notebooks) {
    this.notebooks = notebooks;
  }

  public void unsetNotebooks() {
    this.notebooks = null;
  }

  /** Returns true if field notebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetNotebooks() {
    return this.notebooks != null;
  }

  public void setNotebooksIsSet(boolean value) {
    if (!value) {
      this.notebooks = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.evernote.edam.type.Tag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.evernote.edam.type.Tag elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.evernote.edam.type.Tag>();
    }
    this.tags.add(elem);
  }

  public List<com.evernote.edam.type.Tag> getTags() {
    return this.tags;
  }

  public void setTags(List<com.evernote.edam.type.Tag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been asigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTES:
      if (value == null) {
        unsetNotes();
      } else {
        setNotes((List<com.evernote.edam.type.Note>)value);
      }
      break;

    case NOTEBOOKS:
      if (value == null) {
        unsetNotebooks();
      } else {
        setNotebooks((List<com.evernote.edam.type.Notebook>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.evernote.edam.type.Tag>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTES:
      return getNotes();

    case NOTEBOOKS:
      return getNotebooks();

    case TAGS:
      return getTags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTES:
      return isSetNotes();
    case NOTEBOOKS:
      return isSetNotebooks();
    case TAGS:
      return isSetTags();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RelatedResult)
      return this.equals((RelatedResult)that);
    return false;
  }

  public boolean equals(RelatedResult that) {
    if (that == null)
      return false;

    boolean this_present_notes = true && this.isSetNotes();
    boolean that_present_notes = true && that.isSetNotes();
    if (this_present_notes || that_present_notes) {
      if (!(this_present_notes && that_present_notes))
        return false;
      if (!this.notes.equals(that.notes))
        return false;
    }

    boolean this_present_notebooks = true && this.isSetNotebooks();
    boolean that_present_notebooks = true && that.isSetNotebooks();
    if (this_present_notebooks || that_present_notebooks) {
      if (!(this_present_notebooks && that_present_notebooks))
        return false;
      if (!this.notebooks.equals(that.notebooks))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(RelatedResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RelatedResult typedOther = (RelatedResult)other;

    lastComparison = Boolean.valueOf(isSetNotes()).compareTo(typedOther.isSetNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotes()) {      lastComparison = TBaseHelper.compareTo(this.notes, typedOther.notes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotebooks()).compareTo(typedOther.isSetNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.notebooks, typedOther.notebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {      lastComparison = TBaseHelper.compareTo(this.tags, typedOther.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NOTES
          if (field.type == TType.LIST) {
            {
              TList _list103 = iprot.readListBegin();
              this.notes = new ArrayList<com.evernote.edam.type.Note>(_list103.size);
              for (int _i104 = 0; _i104 < _list103.size; ++_i104)
              {
                com.evernote.edam.type.Note _elem105;
                _elem105 = new com.evernote.edam.type.Note();
                _elem105.read(iprot);
                this.notes.add(_elem105);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NOTEBOOKS
          if (field.type == TType.LIST) {
            {
              TList _list106 = iprot.readListBegin();
              this.notebooks = new ArrayList<com.evernote.edam.type.Notebook>(_list106.size);
              for (int _i107 = 0; _i107 < _list106.size; ++_i107)
              {
                com.evernote.edam.type.Notebook _elem108;
                _elem108 = new com.evernote.edam.type.Notebook();
                _elem108.read(iprot);
                this.notebooks.add(_elem108);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TAGS
          if (field.type == TType.LIST) {
            {
              TList _list109 = iprot.readListBegin();
              this.tags = new ArrayList<com.evernote.edam.type.Tag>(_list109.size);
              for (int _i110 = 0; _i110 < _list109.size; ++_i110)
              {
                com.evernote.edam.type.Tag _elem111;
                _elem111 = new com.evernote.edam.type.Tag();
                _elem111.read(iprot);
                this.tags.add(_elem111);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.notes != null) {
      if (isSetNotes()) {
        oprot.writeFieldBegin(NOTES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.notes.size()));
          for (com.evernote.edam.type.Note _iter112 : this.notes)
          {
            _iter112.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.notebooks != null) {
      if (isSetNotebooks()) {
        oprot.writeFieldBegin(NOTEBOOKS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.notebooks.size()));
          for (com.evernote.edam.type.Notebook _iter113 : this.notebooks)
          {
            _iter113.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.tags != null) {
      if (isSetTags()) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.tags.size()));
          for (com.evernote.edam.type.Tag _iter114 : this.tags)
          {
            _iter114.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("RelatedResult(");
    boolean first = true;

    if (isSetNotes()) {
      sb.append("notes:");
      if (this.notes == null) {
        sb.append("null");
      } else {
        sb.append(this.notes);
      }
      first = false;
    }
    if (isSetNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("notebooks:");
      if (this.notebooks == null) {
        sb.append("null");
      } else {
        sb.append(this.notebooks);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

